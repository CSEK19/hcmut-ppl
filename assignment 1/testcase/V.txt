import unittest
from TestUtils import TestParser


class ParserSuite(unittest.TestCase):
    def test_201(self):
        input = """
        Class Error3 {
            ;
        }
        """
        expect = """Error on line 3 col 12: ;"""
        self.assertTrue(TestParser.test(input, expect, 201))

    def test_202(self):
        input = """
        Class A{
            Constructor(a, b, c, d, e: String; c, d, e: Int){
               If(1+2 == 3){
                If(!False){}
                Elseif(3==7){

                }
               }Else{
                a = 12;
               }
            }
            ## This is a comment ##
            Var array: Array[Float, 10];
            Var array2: Array[Array[Int, 3], 3];
            Val _a, b_, d12: Int = expr, expr, expr;
            Var $abcd: String = expr;
            Var abcd, abc: Float;

            a(hi, hello, nikhao: Int){}

            Destructor(){}
        }
        """
        expect = "successful"
        self.assertTrue(TestParser.test(input, expect, 202))

    def test_203(self):
        input = """
        Class Right__ {
            Var c,d,e-:String;
            Var a: Array[Int, 4] = Array(1, 3, 4, 5);
        }
       """
        expect = """Error on line 3 col 21: -"""
        self.assertTrue(TestParser.test(input, expect, 203))

    def test_204(self):
        input = """
        Class Right__ {
            Var c,d,e:String;
            Var a: Array[Int, 4] = Array(1, 3, 4, 5);
        }
       """
        expect = """successful"""
        self.assertTrue(TestParser.test(input, expect, 204))

    def test_205(self):
        input = """
        Class __Right__ {
            method() {
                If (1 == 2) {
                    Return asd;
                }
                Elseif (2 == 3) {
                    Break;
                    Continue;
                }
                Else {
                    Return 233;
                }
            }
        }
        """
        expect = """successful"""
        self.assertTrue(TestParser.test(input, expect, 205))

    def test_206(self):
        input = """
        Class __Right__ {
            method() {
                Foreach (asd In RVJjpoz >= IzShZxMbKBioj::$A9npv1lnysU4w0oJ7kbL() .. R6n5wEX6zQurDF * IkIS4E) {
                    vFL_cXn0mVPGSJPJCy = NZmYmG >= IzShZxMbKBioj::$A9npv1lnysU4w0oJ7kbL();
                }
                Return Nonsense;
            }
        }
        """
        expect = """successful"""
        self.assertTrue(TestParser.test(input, expect, 206))

    def test_207(self):
        input = """
        Class Error {
            method(s) {
            }
        }
        """
        expect = """Error on line 3 col 20: )"""
        self.assertTrue(TestParser.test(input, expect, 207))

    def test_208(self):
        input = """
        Class Error {
            Var If ;
        }
        """
        expect = """Error on line 3 col 16: If"""
        self.assertTrue(TestParser.test(input, expect, 208))

    def test_209(self):
        input = """
        Class Error {
            Constructor(param: String) {}
        }
        """
        expect = """successful"""
        self.assertTrue(TestParser.test(input, expect, 209))

    def test_210(self):
        input = """
        Class _____ {
            Constructor(param: Int);
        }
        """
        expect = """Error on line 3 col 35: ;"""
        self.assertTrue(TestParser.test(input, expect, 210))

    def test_211(self):
        input = """
        Class __CCDeSua__ {
            Var a: Int = 12.e23;
            method_Kokomi() {
                Self.a = 0x333AL;
            }
        }
        """
        expect = """Error on line 5 col 31: L"""
        self.assertTrue(TestParser.test(input, expect, 211))

    def test_212(self):
        input = """
        Class __CCDeSua__ {
            Var a: Int = 12.e23;
            method_Kokomi() {
                Self = Self + Self;
            }
        }
        """
        expect = """Error on line 5 col 21: ="""
        self.assertTrue(TestParser.test(input, expect, 212))

    def test_213(self):
        input = """
        Class __CCDeSua__ {
            Var a: Int = 12.e23;
            method_() {
                Self = Self + Self;
            }
        }
        """
        expect = """Error on line 5 col 21: ="""
        self.assertTrue(TestParser.test(input, expect, 213))

    def test_214(self):
        input = """
        Class __CCDeSua__ {
            Var a: Int = 12.e23;
            a = 32;
            method_() {

            }
        }
        """
        expect = """Error on line 4 col 14: ="""
        self.assertTrue(TestParser.test(input, expect, 214))

    def test_215(self):
        input = """
        Class __CCDeSua__ {
            Var a: Int = 12.e23;
            method_() {
                a.$foo();
            }
        }
        """
        expect = """Error on line 5 col 18: $foo"""
        self.assertTrue(TestParser.test(input, expect, 215))

    def test_216(self):
        input = """
        Class __CCDeSua__ {
            Var a: Int = 12.e23;
            method_() {
                a::$foo();
            }
        }
        """
        expect = """successful"""
        self.assertTrue(TestParser.test(input, expect, 216))

    def test_217(self):
        input = """
        Class __CCDeSua__ {
            Var a: Int = 12.e23;
            method_() {
                a[123]["ss"][1 + "233"] = Array("asd", "sss");
            }
        }
        """
        expect = """successful"""
        self.assertTrue(TestParser.test(input, expect, 217))

    def test_218(self):
        input = """
        Class __CCDeSua__ {
            Var a: Int = 12.e23;
            method_() {
                a[123]["ss"][1 + "233"] = New X().Y();
            }
        }
        """
        expect = """successful"""
        self.assertTrue(TestParser.test(input, expect, 218))

    def test_219(self):
        input = """
        Class __CCDeSua__ {
            Var a: Int = 12.e23;
            method_() {
                a[123]["ss"][1 + "233"] = New X(Array(22)).Y(333);
            }
        }
        """
        expect = """successful"""
        self.assertTrue(TestParser.test(input, expect, 219))

    def test_220(self):
        input = """
        Class __CCDeSua__ {
            Var a: Int = 12.e23;
            method_() {
                Var $a: String;
            }
        }
        """
        expect = """Error on line 5 col 20: $a"""
        self.assertTrue(TestParser.test(input, expect, 220))

    def test_221(self):
        input = """
        Class __CCDeSua__ {
            If (1 + 1 == 0) {
                Out.print(1 + 2);
            }
            Elseif (1 + 2 == 3) {
                System.sus(11 - "3222");
            }
            Else {
                Break;
                Return;
            }
        }
        """
        expect = """Error on line 3 col 12: If"""
        self.assertTrue(TestParser.test(input, expect, 221))

    def test_222(self):
        input = """
        Class __CCDeSua__ {
            method() {
                If (1 + 1 == 0) {
                    Out.print(1 + 2);
                }
                Elseif (1 + 2 == 3) {
                    System.sus(11 - "3222");
                }
                Else {
                    Break;
                    Return;
                }
            }
        }
        """
        expect = """successful"""
        self.assertTrue(TestParser.test(input, expect, 222))